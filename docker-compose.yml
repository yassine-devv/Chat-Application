services:
  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
      - RABBITMQ_DEFAULT_VHOST=/
      - RABBITMQ_LOOPBACK_USERS=none
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # Management UI
      - "61613:61613"  # STOMP
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 15s
      retries: 10
    command: >
      bash -c "
        rabbitmq-plugins enable --offline rabbitmq_stomp &&
        rabbitmq-plugins enable --offline rabbitmq_web_stomp &&
        rabbitmq-server
      "
    networks:
      - rabbitmq_app_net

  postgresdb:
    image: postgres:latest
    container_name: postgresdb
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "admin", "-d", "chat_app" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=chat_app
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init_db:/docker-entrypoint-initdb.d
    networks:
      - rabbitmq_app_net

  webapp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: webapp
    depends_on:
      postgresdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=admin
      - SPRING_RABBITMQ_PASSWORD=admin
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresdb:5432/chat_app
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
    ports:
      - "8080:8080"
    networks:
      - rabbitmq_app_net


volumes:
  pgdata:

networks:
  rabbitmq_app_net:
    driver: bridge